/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 5000.0;
	SIMULATION_TIME = 5000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("address")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 10;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("address[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("address[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "address";
}

SIGNAL("adres")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("adres[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "adres";
}

SIGNAL("adres[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "adres";
}

SIGNAL("adres[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "adres";
}

SIGNAL("adres[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "adres";
}

SIGNAL("adres[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "adres";
}

SIGNAL("change_flag_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clear")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("counter2")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("counter2[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter2";
}

SIGNAL("counter2[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter2";
}

SIGNAL("counter2[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter2";
}

SIGNAL("counter2[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter2";
}

SIGNAL("counter2[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "counter2";
}

SIGNAL("counter2_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("data[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("data[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("data[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("data[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "data";
}

SIGNAL("line_changed")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("line_not_empty")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("load_from_ram")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("offset_counter")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("offset_counter[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "offset_counter";
}

SIGNAL("offset_counter[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "offset_counter";
}

SIGNAL("offset_counter[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "offset_counter";
}

SIGNAL("r/w")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ram";
}

SIGNAL("ram[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ram";
}

SIGNAL("ram[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ram";
}

SIGNAL("ram[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ram";
}

SIGNAL("ram_input_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ram_output_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("read_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("read_hit")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_input_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("rom_output_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("save_rom_address")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("vcc")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("write_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("write_hit")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("write_tag_clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("address[9]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("address[8]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("address[7]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 1 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("address[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("address[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("address[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 570.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 300.0;
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 560.0;
	}
}

TRANSITION_LIST("address[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 300.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 300.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 300.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 570.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 300.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 300.0;
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 290.0;
	}
}

TRANSITION_LIST("address[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 150.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 150.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL Z FOR 30.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 150.0;
				LEVEL 1 FOR 120.0;
			}
		}
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 150.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 150.0;
			LEVEL 1 FOR 120.0;
		}
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("address[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 90.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 90.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 30.0;
			LEVEL Z FOR 30.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 90.0;
				LEVEL 1 FOR 60.0;
				LEVEL 0 FOR 60.0;
				LEVEL 1 FOR 60.0;
			}
		}
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 90.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 90.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
		}
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("address[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 60.0;
				NODE
				{
					REPEAT = 3;
					LEVEL 1 FOR 30.0;
					LEVEL 0 FOR 30.0;
				}
				LEVEL 1 FOR 30.0;
			}
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 25;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 30.0;
				LEVEL 0 FOR 30.0;
			}
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("adres[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 3380.0;
		LEVEL 1 FOR 960.0;
		LEVEL 0 FOR 660.0;
	}
}

TRANSITION_LIST("adres[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2900.0;
		LEVEL 1 FOR 480.0;
		LEVEL 0 FOR 480.0;
		LEVEL 1 FOR 480.0;
		LEVEL 0 FOR 660.0;
	}
}

TRANSITION_LIST("adres[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1040.0;
		LEVEL 1 FOR 1860.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 240.0;
			LEVEL 1 FOR 240.0;
		}
		LEVEL 0 FOR 660.0;
	}
}

TRANSITION_LIST("adres[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 650.0;
		LEVEL 1 FOR 390.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 6;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 120.0;
		}
		LEVEL 0 FOR 660.0;
	}
}

TRANSITION_LIST("adres[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 330.0;
		LEVEL 0 FOR 330.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 600.0;
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 600.0;
		NODE
		{
			REPEAT = 13;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 600.0;
	}
}

TRANSITION_LIST("change_flag_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 970.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 650.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 590.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2160.0;
	}
}

TRANSITION_LIST("clear")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 570.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("clock")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 498;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 5.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("counter2[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1530.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 480.0;
		}
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 2040.0;
		LEVEL 1 FOR 110.0;
	}
}

TRANSITION_LIST("counter2[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 240.0;
			LEVEL 1 FOR 90.0;
		}
		LEVEL 0 FOR 300.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 360.0;
		}
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 1920.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("counter2[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 210.0;
		}
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 270.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 240.0;
		}
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 1800.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 110.0;
	}
}

TRANSITION_LIST("counter2[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 2;
				LEVEL 0 FOR 60.0;
				LEVEL 1 FOR 60.0;
			}
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
		}
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 14;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 1620.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
		}
		LEVEL 1 FOR 50.0;
	}
}

TRANSITION_LIST("counter2[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 4;
				LEVEL 1 FOR 30.0;
				LEVEL 0 FOR 30.0;
			}
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 66;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("counter2_clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 166;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
	}
}

TRANSITION_LIST("data[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 60.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 220.0;
		LEVEL 1 FOR 50.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 230.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("data[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 50.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 110.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 50.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 240.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 230.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 230.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("data[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 50.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 30.0;
			LEVEL Z FOR 30.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 230.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 250.0;
		LEVEL 0 FOR 230.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 30.0;
		NODE
		{
			REPEAT = 25;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 90.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("data[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 50.0;
		LEVEL Z FOR 60.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 50.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 240.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 250.0;
		LEVEL 1 FOR 230.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 510.0;
		NODE
		{
			REPEAT = 25;
			LEVEL Z FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 60.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 40.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("line_changed")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 970.0;
		LEVEL 1 FOR 4030.0;
	}
}

TRANSITION_LIST("line_not_empty")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 40.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 1 FOR 300.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 310.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 1 FOR 570.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 560.0;
	}
}

TRANSITION_LIST("load_from_ram")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 90.0;
		}
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 30.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 360.0;
		}
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 1920.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("offset_counter[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 210.0;
		}
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 270.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 150.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 210.0;
		}
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 1770.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("offset_counter[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 150.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 210.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 90.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 150.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 1710.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("offset_counter[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 30.0;
				LEVEL 0 FOR 30.0;
			}
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 120.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 180.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 30.0;
				LEVEL 0 FOR 30.0;
			}
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 60.0;
			NODE
			{
				REPEAT = 3;
				LEVEL 1 FOR 30.0;
				LEVEL 0 FOR 30.0;
			}
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 120.0;
		}
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 1680.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 60.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("r/w")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 300.0;
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL Z FOR 30.0;
		LEVEL 1 FOR 570.0;
		NODE
		{
			REPEAT = 2;
			LEVEL Z FOR 30.0;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 240.0;
			LEVEL 1 FOR 300.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL Z FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL Z FOR 30.0;
		LEVEL 0 FOR 300.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("ram[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 280.0;
		LEVEL 1 FOR 150.0;
		LEVEL 0 FOR 510.0;
		LEVEL 1 FOR 780.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 330.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 2340.0;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 220.0;
	}
}

TRANSITION_LIST("ram[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 150.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 270.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 780.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 330.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 1980.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 100.0;
	}
}

TRANSITION_LIST("ram[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 150.0;
		}
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 180.0;
		LEVEL 1 FOR 600.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 330.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 2160.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("ram[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 70.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 150.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 780.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 330.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 2160.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 90.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 40.0;
	}
}

TRANSITION_LIST("ram_input_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 65.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 5.0;
				LEVEL 0 FOR 25.0;
			}
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 115.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 25.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 175.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 5.0;
				LEVEL 0 FOR 25.0;
			}
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 55.0;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 5.0;
				LEVEL 0 FOR 25.0;
			}
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 115.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 25.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 55.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 25.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 1675.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 25.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 55.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 25.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 40.0;
	}
}

TRANSITION_LIST("ram_output_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 166;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 25.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 5.0;
	}
}

TRANSITION_LIST("read_clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 300.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 660.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 360.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 330.0;
		NODE
		{
			REPEAT = 25;
			LEVEL 1 FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 270.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("read_hit")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 270.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 300.0;
		LEVEL U FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 570.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 300.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL U FOR 30.0;
			LEVEL 1 FOR 30.0;
		}
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 270.0;
		LEVEL 1 FOR 20.0;
	}
}

TRANSITION_LIST("rom_input_clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 325.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 55.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 595.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 55.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 585.0;
	}
}

TRANSITION_LIST("rom_output_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 325.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 55.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 595.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 55.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 580.0;
	}
}

TRANSITION_LIST("save_rom_address")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 325.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 55.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 595.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL 1 FOR 5.0;
			LEVEL 0 FOR 55.0;
		}
		LEVEL 1 FOR 5.0;
		LEVEL 0 FOR 575.0;
	}
}

TRANSITION_LIST("vcc")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 5000.0;
	}
}

TRANSITION_LIST("write_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 80.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 10.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 110.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 150.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 50.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 7;
				LEVEL 1 FOR 10.0;
				LEVEL 0 FOR 20.0;
			}
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 360.0;
		}
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 20.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 1920.0;
		NODE
		{
			REPEAT = 8;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 20.0;
		}
	}
}

TRANSITION_LIST("write_hit")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 260.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 40.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 260.0;
		LEVEL 1 FOR 310.0;
		NODE
		{
			REPEAT = 2;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 530.0;
			LEVEL 1 FOR 40.0;
		}
		NODE
		{
			REPEAT = 26;
			LEVEL U FOR 30.0;
			LEVEL 0 FOR 30.0;
		}
		LEVEL U FOR 30.0;
		LEVEL 0 FOR 530.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
	}
}

TRANSITION_LIST("write_tag_clk")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 290.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 320.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 380.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 260.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 590.0;
		}
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 2150.0;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 20.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "vcc";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "adres";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
	CHILDREN = 3, 4, 5, 6, 7;
}

DISPLAY_LINE
{
	CHANNEL = "adres[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "adres[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "adres[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "adres[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "adres[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 2;
}

DISPLAY_LINE
{
	CHANNEL = "rom_input_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "rom_output_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "save_rom_address";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "change_flag_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "clear";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "counter2_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "address";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16, 17, 18, 19, 20, 21, 22, 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "address[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "address[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "data";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
	CHILDREN = 26, 27, 28, 29;
}

DISPLAY_LINE
{
	CHANNEL = "data[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 25;
}

DISPLAY_LINE
{
	CHANNEL = "data[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 25;
}

DISPLAY_LINE
{
	CHANNEL = "data[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 25;
}

DISPLAY_LINE
{
	CHANNEL = "data[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 25;
}

DISPLAY_LINE
{
	CHANNEL = "line_changed";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 30;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "line_not_empty";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "load_from_ram";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 32;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "offset_counter";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 33;
	TREE_LEVEL = 0;
	CHILDREN = 34, 35, 36;
}

DISPLAY_LINE
{
	CHANNEL = "offset_counter[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "offset_counter[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "offset_counter[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 33;
}

DISPLAY_LINE
{
	CHANNEL = "r/w";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 37;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "counter2";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 38;
	TREE_LEVEL = 0;
	CHILDREN = 39, 40, 41, 42, 43;
}

DISPLAY_LINE
{
	CHANNEL = "counter2[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "counter2[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "counter2[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "counter2[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "counter2[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "ram";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 44;
	TREE_LEVEL = 0;
	CHILDREN = 45, 46, 47, 48;
}

DISPLAY_LINE
{
	CHANNEL = "ram[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "ram[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 46;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "ram[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 47;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "ram[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 48;
	TREE_LEVEL = 1;
	PARENT = 44;
}

DISPLAY_LINE
{
	CHANNEL = "ram_input_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 49;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ram_output_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 50;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "write_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 51;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "read_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 52;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "read_hit";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 53;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "write_hit";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 54;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "write_tag_clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 55;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
